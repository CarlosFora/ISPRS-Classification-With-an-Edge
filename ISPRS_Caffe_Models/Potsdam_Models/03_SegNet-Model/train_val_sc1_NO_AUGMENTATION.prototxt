name: "SegNet-ClassBoundaries-sc1-Training"

layer {
  name: "data-train"
  type: "Data"
  top: "_image"
  include {
    phase: TRAIN
  }
    data_param {
    source: "... path to training images of size 256x256"
    batch_size: 1
    backend: LMDB
  }
  transform_param {
    scale: 0.00390625
  }
}

layer {
  name: "data-train"
  type: "Data"
  top: "_dsm"
  include {
    phase: TRAIN
  }
    data_param {
    source: "... path to training dsm-data of size 256x256"
    batch_size: 1
    backend: LMDB
  }
  transform_param {
    scale: 0.003333333
  }
}

layer {
  name: "data-train"
  type: "Data"
  top: "_ndsm"
  include {
    phase: TRAIN
  }
    data_param {
    source: "... path to training ndsm-data of size 256x256"
    batch_size: 1
    backend: LMDB
  }
  transform_param {
    scale: 0.003333333
  }
}


layer {
  name: "data-train"
  type: "Data"
  top: "_label"
  include {
    phase: TRAIN
  }
    data_param {
    source: "... path to training labels of size 256x256"
    batch_size: 1
    backend: LMDB
  }  
}

layer {
  name: "data-train"
  type: "Data"
  top: "_edge-label"
  include {
    phase: TRAIN
  }
  data_param {
    source: "... path to training class-boundaries of size 256x256"
    batch_size: 1
    backend: LMDB
  }
}

# ====================== VAL DATA ====================== #

layer {
  name: "data-train"
  type: "Data"
  top: "_image"
  include {
    phase: TEST 
  }
    data_param {
    source: "... path to validation images of size 256x256"
    batch_size: 1
    backend: LMDB
  }
  transform_param {
    scale: 0.00390625
  }
}

layer {
  name: "data-train"
  type: "Data"
  top: "_dsm"
  include {
    phase: TEST 
  }
    data_param {
    source: "... path to validation dsm-data of size 256x256"
    batch_size: 1
    backend: LMDB
  }
  transform_param {
    scale: 0.003333333
  }
}

layer {
  name: "data-train"
  type: "Data"
  top: "_ndsm"
  include {
    phase: TEST 
  }
    data_param {
    source: "... path to validation ndsm-data of size 256x256"
    batch_size: 1
    backend: LMDB
  }
  transform_param {
    scale: 0.003333333
  }
}

layer {
  name: "data-train"
  type: "Data"
  top: "_label"
  include {
    phase: TEST 
  }
    data_param {
    source: "... path to validation labels of size 256x256"
    batch_size: 1
    backend: LMDB
  }
}

layer {
  name: "data-val"
  type: "Data"
  top: "_edge-label"
  include {
    phase: TEST 
  }
  data_param {
    source: "... path to validation class-boundaries of size 256x256"
    batch_size: 1
    backend: LMDB
  }
}


############################# Concatenate all input data   ######################################

layer {
  name: "data-componets"
  type: "Concat"
  bottom: "_image"
  bottom: "_dsm"
  bottom: "_ndsm"
  bottom: "_label"
    bottom: "_edge-label"
  top: "_data"
}

# ==========================  STOCHASTIC AUGMENTATION ================================ #                                            
                                              
# layer {                                       
#     name: "data_augmentation"                 
#     type: "Python"                            
#     bottom: "_data"                           
#     top: "_data"                              
#     python_param {                            
#         module: "layer_data_augmentator"      
#         layer: "RealtimeDataAugmentation"     
#     }               
#     include {       
#         phase: TRAIN
#      }                                                         
#  }         

# ======================== SEPARATE CONCATENATED LAYERS =============================== #                                                                                                                                                                         
layer {                                                                                                                             
  name: "data_slicer"                     
  type: "Slice"                           
  bottom: "_data"                         
  top: "image"                            
  top: "dsm"                              
  top: "ndsm"                             
  top: "label"                            
  top: "edge-label"                       
  slice_param {                           
    axis: 1                               
    slice_point: 3                        
    slice_point: 4                        
    slice_point: 5                        
    slice_point: 6                        
  }                                       
}   

############################# Concatenate nDSM and DSM   ##############################

layer {
  name: "dem-componets"
  type: "Concat"
  bottom: "dsm"
  bottom: "ndsm"
  top: "dem"
}

################## Edge Model Inference #######################


layer {
  name: "edge_dem_conv1_1_"
  type: "Convolution"
  bottom: "dem"
  top: "ee_dem_conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 35
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv1_1"
  top: "ee_dem_conv1_1"
  name: "edge_dem_conv1_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "ee_dem_conv1_1"
  top: "ee_dem_conv1_1"
  name: "edge_dem_conv1_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

# ---------------------------------- #

layer {
  name: "edge_conv1_1"
  type: "Convolution"
  bottom: "image"
  top: "ee_data_conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 35
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv1_1"
  top: "ee_data_conv1_1"
  name: "edge_conv1_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "ee_data_conv1_1"
  top: "ee_data_conv1_1"
  name: "edge_conv1_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

# ==================================== #

layer {
  name: "data_relu1_1"
  type: "ReLU"
  bottom: "ee_data_conv1_1"
  top: "ee_data_conv1_1"
}
layer {
  name: "dem_relu1_1"
  type: "ReLU"
  bottom: "ee_dem_conv1_1"
  top: "ee_dem_conv1_1"
}

# =================================== #

layer {
  name: "edge_conv1_2"
  type: "Convolution"
  bottom: "ee_data_conv1_1"
  top: "ee_data_conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv1_2"
  top: "ee_data_conv1_2"
  name: "edge_conv1_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv1_2"
  top: "ee_data_conv1_2"
  name: "edge_conv1_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

layer {
  name: "edge_dem_conv1_2_"
  type: "Convolution"
  bottom: "ee_dem_conv1_1"
  top: "ee_dem_conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv1_2"
  top: "ee_dem_conv1_2"
  name: "edge_dem_conv1_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "ee_dem_conv1_2"
  top: "ee_dem_conv1_2"
  name: "edge_dem_conv1_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

# ========================= #

layer {
  name: "data_relu1_2"
  type: "ReLU"
  bottom: "ee_data_conv1_2"
  top: "ee_data_conv1_2"
}
layer {
  name: "dem_relu1_2"
  type: "ReLU"
  bottom: "ee_dem_conv1_2"
  top: "ee_dem_conv1_2"
}

# ========================== #

layer {
  name: "data_pool1"
  type: "Pooling"
  bottom: "ee_data_conv1_2"
  top: "ee_data_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "dem_pool1"
  type: "Pooling"
  bottom: "ee_dem_conv1_2"
  top: "ee_dem_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# =========================== #

layer {
  name: "edge_conv2_1"
  type: "Convolution"
  bottom: "ee_data_pool1"
  top: "ee_data_conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv2_1"
  top: "ee_data_conv2_1"
  name: "edge_conv2_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv2_1"
  top: "ee_data_conv2_1"
  name: "edge_conv2_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv2_1_"
  type: "Convolution"
  bottom: "ee_dem_pool1"
  top: "ee_dem_conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv2_1"
  top: "ee_dem_conv2_1"
  name: "edge_dem_conv2_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "ee_dem_conv2_1"
  top: "ee_dem_conv2_1"
  name: "edge_dem_conv2_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# ====================== #

layer {
  name: "data_relu2_1"
  type: "ReLU"
  bottom: "ee_data_conv2_1"
  top: "ee_data_conv2_1"
}
layer {
  name: "dem_relu2_1"
  type: "ReLU"
  bottom: "ee_dem_conv2_1"
  top: "ee_dem_conv2_1"
}

# ====================== #

layer {
  name: "edge_conv2_2"
  type: "Convolution"
  bottom: "ee_data_conv2_1"
  top: "ee_data_conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv2_2"
  top: "ee_data_conv2_2"
  name: "edge_conv2_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv2_2"
  top: "ee_data_conv2_2"
  name: "edge_conv2_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv2_2_"
  type: "Convolution"
  bottom: "ee_dem_conv2_1"
  top: "ee_dem_conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv2_2"
  top: "ee_dem_conv2_2"
  name: "edge_dem_conv2_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "ee_dem_conv2_2"
  top: "ee_dem_conv2_2"
  name: "edge_dem_conv2_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

# =========================== #

layer {
  name: "data_relu2_2"
  type: "ReLU"
  bottom: "ee_data_conv2_2"
  top: "ee_data_conv2_2"
}
layer {
  name: "dem_relu2_2"
  type: "ReLU"
  bottom: "ee_dem_conv2_2"
  top: "ee_dem_conv2_2"
}

# =========================== #

layer {
  name: "data_pool2"
  type: "Pooling"
  bottom: "ee_data_conv2_2"
  top: "ee_data_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "dem_pool2"
  type: "Pooling"
  bottom: "ee_dem_conv2_2"
  top: "ee_dem_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ========================== #

layer {
  name: "edge_conv3_1"
  type: "Convolution"
  bottom: "ee_data_pool2"
  top: "ee_data_conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv3_1"
  top: "ee_data_conv3_1"
  name: "edge_conv3_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv3_1"
  top: "ee_data_conv3_1"
  name: "edge_conv3_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv3_1_"
  type: "Convolution"
  bottom: "ee_dem_pool2"
  top: "ee_dem_conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv3_1"
  top: "ee_dem_conv3_1"
  name: "edge_dem_conv3_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "ee_dem_conv3_1"
  top: "ee_dem_conv3_1"
  name: "edge_dem_conv3_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# =========================== #

layer {
  name: "data_relu3_1"
  type: "ReLU"
  bottom: "ee_data_conv3_1"
  top: "ee_data_conv3_1"
}
layer {
  name: "dem_relu3_1"
  type: "ReLU"
  bottom: "ee_dem_conv3_1"
  top: "ee_dem_conv3_1"
}

# ============================ #

layer {
  name: "edge_conv3_2"
  type: "Convolution"
  bottom: "ee_data_conv3_1"
  top: "ee_data_conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv3_2"
  top: "ee_data_conv3_2"
  name: "edge_conv3_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv3_2"
  top: "ee_data_conv3_2"
  name: "edge_conv3_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv3_2_"
  type: "Convolution"
  bottom: "ee_dem_conv3_1"
  top: "ee_dem_conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv3_2"
  top: "ee_dem_conv3_2"
  name: "edge_dem_conv3_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv3_2"
  top: "ee_dem_conv3_2"
  name: "edge_dem_conv3_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# ========================= #

layer {
  name: "data_relu3_2"
  type: "ReLU"
  bottom: "ee_data_conv3_2"
  top: "ee_data_conv3_2"
}
layer {
  name: "dem_relu3_2"
  type: "ReLU"
  bottom: "ee_dem_conv3_2"
  top: "ee_dem_conv3_2"
}

# ====================== #

layer {
  name: "edge_conv3_3"
  type: "Convolution"
  bottom: "ee_data_conv3_2"
  top: "ee_data_conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv3_3"
  top: "ee_data_conv3_3"
  name: "edge_conv3_3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv3_3"
  top: "ee_data_conv3_3"
  name: "edge_conv3_3_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv3_3_"
  type: "Convolution"
  bottom: "ee_dem_conv3_2"
  top: "ee_dem_conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv3_3"
  top: "ee_dem_conv3_3"
  name: "edge_dem_conv3_3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv3_3"
  top: "ee_dem_conv3_3"
  name: "edge_dem_conv3_3_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# ======================= #

layer {
  name: "data_relu3_3"
  type: "ReLU"
  bottom: "ee_data_conv3_3"
  top: "ee_data_conv3_3"
}
layer {
  name: "dem_relu3_3"
  type: "ReLU"
  bottom: "ee_dem_conv3_3"
  top: "ee_dem_conv3_3"
}

# ===================== #

layer {
  name: "data_pool3"
  type: "Pooling"
  bottom: "ee_data_conv3_3"
  top: "ee_data_pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "dem_pool3"
  type: "Pooling"
  bottom: "ee_dem_conv3_3"
  top: "ee_dem_pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ====================== #

layer {
  name: "edge_conv4_1"
  type: "Convolution"
  bottom: "ee_data_pool3"
  top: "ee_data_conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv4_1"
  top: "ee_data_conv4_1"
  name: "edge_conv4_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv4_1"
  top: "ee_data_conv4_1"
  name: "edge_conv4_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv4_1_"
  type: "Convolution"
  bottom: "ee_dem_pool3"
  top: "ee_dem_conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv4_1"
  top: "ee_dem_conv4_1"
  name: "edge_dem_conv4_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv4_1"
  top: "ee_dem_conv4_1"
  name: "edge_dem_conv4_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# ==================== #

layer {
  name: "data_relu4_1"
  type: "ReLU"
  bottom: "ee_data_conv4_1"
  top: "ee_data_conv4_1"
}
layer {
  name: "dem_relu4_1"
  type: "ReLU"
  bottom: "ee_dem_conv4_1"
  top: "ee_dem_conv4_1"
}

# ===================== #

layer {
  name: "edge_conv4_2"
  type: "Convolution"
  bottom: "ee_data_conv4_1"
  top: "ee_data_conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv4_2"
  top: "ee_data_conv4_2"
  name: "edge_conv4_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv4_2"
  top: "ee_data_conv4_2"
  name: "edge_conv4_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv4_2_"
  type: "Convolution"
  bottom: "ee_dem_conv4_1"
  top: "ee_dem_conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv4_2"
  top: "ee_dem_conv4_2"
  name: "edge_dem_conv4_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv4_2"
  top: "ee_dem_conv4_2"
  name: "edge_dem_conv4_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

# ==================== #

layer {
  name: "data_relu4_2"
  type: "ReLU"
  bottom: "ee_data_conv4_2"
  top: "ee_data_conv4_2"
}
layer {
  name: "dem_relu4_2"
  type: "ReLU"
  bottom: "ee_dem_conv4_2"
  top: "ee_dem_conv4_2"
}

# ===================== #

layer {
  name: "edge_conv4_3"
  type: "Convolution"
  bottom: "ee_data_conv4_2"
  top: "ee_data_conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv4_3"
  top: "ee_data_conv4_3"
  name: "edge_conv4_3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv4_3"
  top: "ee_data_conv4_3"
  name: "edge_conv4_3_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv4_3_"
  type: "Convolution"
  bottom: "ee_dem_conv4_2"
  top: "ee_dem_conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv4_3"
  top: "ee_dem_conv4_3"
  name: "edge_dem_conv4_3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv4_3"
  top: "ee_dem_conv4_3"
  name: "edge_dem_conv4_3_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}

# ====================== #

layer {
  name: "data_relu4_3"
  type: "ReLU"
  bottom: "ee_data_conv4_3"
  top: "ee_data_conv4_3"
}
layer {
  name: "dem_relu4_3"
  type: "ReLU"
  bottom: "ee_dem_conv4_3"
  top: "ee_dem_conv4_3"
}

# ====================== #

layer {
  name: "data_pool4"
  type: "Pooling"
  bottom: "ee_data_conv4_3"
  top: "ee_data_pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "dem_pool4"
  type: "Pooling"
  bottom: "ee_dem_conv4_3"
  top: "ee_dem_pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ===================== #

layer {
  name: "edge_conv5_1"
  type: "Convolution"
  bottom: "ee_data_pool4"
  top: "ee_data_conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv5_1"
  top: "ee_data_conv5_1"
  name: "edge_conv5_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv5_1"
  top: "ee_data_conv5_1"
  name: "edge_conv5_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv5_1_"
  type: "Convolution"
  bottom: "ee_dem_pool4"
  top: "ee_dem_conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv5_1"
  top: "ee_dem_conv5_1"
  name: "edge_dem_conv5_1_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv5_1"
  top: "ee_dem_conv5_1"
  name: "edge_dem_conv5_1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# ======================== #

layer {
  name: "data_relu5_1"
  type: "ReLU"
  bottom: "ee_data_conv5_1"
  top: "ee_data_conv5_1"
}
layer {
  name: "dem_relu5_1"
  type: "ReLU"
  bottom: "ee_dem_conv5_1"
  top: "ee_dem_conv5_1"
}

# ===================== #

layer {
  name: "edge_conv5_2"
  type: "Convolution"
  bottom: "ee_data_conv5_1"
  top: "ee_data_conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  bottom: "ee_data_conv5_2"
  top: "ee_data_conv5_2"
  name: "edge_conv5_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_data_conv5_2"
  top: "ee_data_conv5_2"
  name: "edge_conv5_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_dem_conv5_2_"
  type: "Convolution"
  bottom: "ee_dem_conv5_1"
  top: "ee_dem_conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv5_2"
  top: "ee_dem_conv5_2"
  name: "edge_dem_conv5_2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv5_2"
  top: "ee_dem_conv5_2"
  name: "edge_dem_conv5_2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# ======================== #

layer {
  name: "data_relu5_2"
  type: "ReLU"
  bottom: "ee_data_conv5_2"
  top: "ee_data_conv5_2"
}
layer {
  name: "dem_relu5_2"
  type: "ReLU"
  bottom: "ee_dem_conv5_2"
  top: "ee_dem_conv5_2"
}

# ====================== #

layer {
  name: "edge_conv5_3"
  type: "Convolution"
  bottom: "ee_data_conv5_2"
  top: "ee_data_conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "edge_dem_conv5_3_"
  type: "Convolution"
  bottom: "ee_dem_conv5_2"
  top: "ee_dem_conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    engine: CUDNN
  }
}
layer {
  bottom: "ee_dem_conv5_3"
  top: "ee_dem_conv5_3"
  name: "edge_dem_conv5_3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "ee_dem_conv5_3"
  top: "ee_dem_conv5_3"
  name: "edge_dem_conv5_3_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0 }  # initialize bias
    }
}


# =========================== #

layer {
  name: "data_relu5_3"
  type: "ReLU"
  bottom: "ee_data_conv5_3"
  top: "ee_data_conv5_3"
}
layer {
  name: "dem_relu5_3"
  type: "ReLU"
  bottom: "ee_dem_conv5_3"
  top: "ee_dem_conv5_3"
}

#################### DSN-1 ####################

layer {
  name: "dsn-1-fuse"
  type: "Concat"
  bottom: "ee_data_conv1_2"
  bottom: "ee_dem_conv1_2"
  top: "score-dsn1-merge"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "edge_score-dsn1"
  type: "Convolution"
  bottom: "score-dsn1-merge"
  top: "score-dsn1-up"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    engine: CUDNN
  }
}

layer {
  bottom: "score-dsn1-up"
  top: "score-dsn1-up"
  name: "score-dsn1-up-bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "score-dsn1-up"
  top: "score-dsn1-up"
  name: "score-dsn1-up-scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "dsn1_relu"
  type: "ReLU"
  bottom: "score-dsn1-up"
  top: "score-dsn1-up_"

layer {
  name: "crop"
  type: "Crop"
  bottom: "score-dsn1-up_"
  bottom: "image"
  top: "score-dsn1"
  crop_param {
      axis: 2
       #offset: 0
       offset: 34
       offset: 34
  }
}

layer { name: "loss-dns1"   type: "EuclideanLoss" bottom: "score-dsn1" bottom: "edge-label" top: "dsn1_loss" loss_weight: 1 }

#################### DSN-2 #################### 

layer {
  name: "dsn-2-fuse"
  type: "Concat"
  bottom: "ee_data_conv2_2"
  bottom: "ee_dem_conv2_2"
  top: "score-dsn2-merge"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "edge_score-dsn2"
  type: "Convolution"
  bottom: "score-dsn2-merge"
  top: "score-dsn2_"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    engine: CUDNN
  }
}

layer {
  bottom: "score-dsn2_"
  top: "score-dsn2_"
  name: "score-dsn2_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "score-dsn2_"
  top: "score-dsn2_"
  name: "score-dsn2_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_upsample_2_"
  type: "Deconvolution"
  bottom: "score-dsn2_"
  top: "score-dsn2-up"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 4
    stride: 2
    weight_filler: {type: "bilinear" } 
    bias_term: true
  }
}

layer {
  name: "dsn2_relu"
  type: "ReLU"
  bottom: "score-dsn2-up"
  top: "score-dsn2-up_"

layer {
  name: "crop"
  type: "Crop"
  bottom: "score-dsn2-up_"
  bottom: "image"
  top: "score-dsn2"
  crop_param {
      axis: 2
      #offset: 0
      offset: 35
      offset: 35
  }
}

layer { name: "loss-dns2" type: "EuclideanLoss" bottom: "score-dsn2" bottom: "edge-label" top: "dsn2_loss" loss_weight: 1}

#################### DSN-3 ####################

layer {
  name: "dsn-3-fuse"
  type: "Concat"
  bottom: "ee_data_conv3_3"
  bottom: "ee_dem_conv3_3"
  top: "score-dsn3-merge"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "edge_score-dsn3"
  type: "Convolution"
  bottom: "score-dsn3-merge"
  top: "score-dsn3_"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    engine: CUDNN
  }
}

layer {
  bottom: "score-dsn3_"
  top: "score-dsn3_"
  name: "score-dsn3_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "score-dsn3_"
  top: "score-dsn3_"
  name: "score-dsn3_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_upsample_4_"
  type: "Deconvolution"
  bottom: "score-dsn3_"
  top: "score-dsn3-up"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 8
    stride: 4
    weight_filler: {type: "bilinear" } 
    bias_term: true
  }
}

layer {
  name: "dsn3_relu"
  type: "ReLU"
  bottom: "score-dsn3-up"
  top: "score-dsn3-up_"

layer {
  name: "crop"
  type: "Crop"
  bottom: "score-dsn3-up_"
  bottom: "image"
  top: "score-dsn3"
  crop_param {
      axis: 2
      #offset: 0
      offset: 36
      offset: 36
  }
}

layer { name: "loss-dns3" type: "EuclideanLoss" bottom: "score-dsn3" bottom: "edge-label" top: "dsn3_loss" loss_weight: 1}


#################### DSN-4 ####################

layer {
  name: "dsn-4-fuse"
  type: "Concat"
  bottom: "ee_data_conv4_3"
  bottom: "ee_dem_conv4_3"
  top: "score-dsn4-merge"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "edge_score-dsn4"
  type: "Convolution"
  bottom: "score-dsn4-merge"
  top: "score-dsn4_"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    engine: CUDNN
  }
}
layer {
  bottom: "score-dsn4_"
  top: "score-dsn4_"
  name: "score-dsn4_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "score-dsn4_"
  top: "score-dsn4_"
  name: "score-dsn4_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_upsample_8_"
  type: "Deconvolution"
  bottom: "score-dsn4_"
  top: "score-dsn4-up"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 16
    stride: 8
    weight_filler: {type: "bilinear" } 
    bias_term: true
  }
}

layer {
  name: "dsn4_relu"
  type: "ReLU"
  bottom: "score-dsn4-up"
  top: "score-dsn4-up_"

layer {
  name: "crop"
  type: "Crop"
  bottom: "score-dsn4-up_"
  bottom: "image"
  top: "score-dsn4"
  crop_param {
      axis: 2
      #offset: 0
      offset: 40
      offset: 40
  }
}

layer { name: "loss-dns4" type: "EuclideanLoss" bottom: "score-dsn4" bottom: "edge-label" top: "dsn4_loss" loss_weight: 1}


#################### DSN-5 ####################

layer {
  name: "dsn-5-fuse"
  type: "Concat"
  bottom: "ee_data_conv5_3"
  bottom: "ee_dem_conv5_3"
  top: "score-dsn5-merge"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "edge_score-dsn5"
  type: "Convolution"
  bottom: "score-dsn5-merge"
  top: "score-dsn5_"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    engine: CUDNN
  }
}

layer {
  bottom: "score-dsn5_"
  top: "score-dsn5_"
  name: "score-dsn5_bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "score-dsn5_"
  top: "score-dsn5_"
  name: "score-dsn5_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_upsample_16_"
  type: "Deconvolution"
  bottom: "score-dsn5_"
  top: "score-dsn5-up"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 32
    stride: 16
    weight_filler: {type: "bilinear" } 
    bias_term: true
  }
}

layer {
  name: "dsn5_relu"
  type: "ReLU"
  bottom: "score-dsn5-up"
  top: "score-dsn5-up_"

layer {
  name: "crop"
  type: "Crop"
  bottom: "score-dsn5-up_"
  bottom: "image"
  top: "score-dsn5"
  crop_param {
      axis: 2
      #offset: 0
      offset: 48
      offset: 48
  }
}

layer { name: "loss-dns5" type: "EuclideanLoss" bottom: "score-dsn5"  bottom: "edge-label" top: "dsn5_loss" loss_weight: 1 }


#################### FUSE DSN ####################

layer {
  name: "concat"
  type: "Concat"
  bottom: "score-dsn1"
  bottom: "score-dsn2"
  bottom: "score-dsn3"
  bottom: "score-dsn4"
  bottom: "score-dsn5"
  top: "concat-score"
  concat_param {
    concat_dim: 1
  }
}

layer {
  bottom: "concat-score"
  top: "concat-score"
  name: "concat-score-bn"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "concat-score"
  top: "concat-score"
  name: "concat-score-scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

layer {
  name: "edge_new-score-weighting"
  type: "Convolution"
  bottom: "concat-score"
  top: "edge"
  param {
    lr_mult: 1 
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    engine: CUDNN
  }
}

layer { name: "edge-loss" type: "EuclideanLoss" bottom: "edge" bottom: "edge-label" top: "edge-loss" loss_weight: 1 }





#======================================================================================================
#==================================    ANNOTATION NETWORK ======================================#
#======================================================================================================


############################## Concatenate Edges to Train Data  ###################################

layer {
  name: "image-and-edges"
  type: "Concat"
  bottom: "image"
  bottom: "edge"
  top: "image-and-edges"
}

layer {
  bottom: "image-and-edges"
  top: "image-and-edges-norm"
  name: "image-and-edge-normalization"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}



layer {
  name: "dem-and-edges"
  type: "Concat"
  bottom: "dem"
  bottom: "edge"
  top: "dem-and-edges"
}

layer {
  bottom: "dem-and-edges"
  top: "dem-and-edges-norm"
  name: "dem-and-edge-normalization"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}



#======================================================================================================

layer {
  bottom: "image-and-edges-norm"
  top: "conv1_1_sc1"
  name: "conv1_1_"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
  }
}

layer {
  bottom: "conv1_1_sc1"
  top: "conv1_1_sc1"
  name: "conv1_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv1_1_sc1"
  top: "conv1_1_sc1"
  name: "conv1_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

layer {
  bottom: "dem-and-edges-norm"
  top: "dem_conv1_1_sc1"
  name: "dem_conv1_1_"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
  }
}


layer {
  bottom: "dem_conv1_1_sc1"
  top: "dem_conv1_1_sc1"
  name: "dem_conv1_1_bn_sc1__"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv1_1_sc1"
  top: "dem_conv1_1_sc1"
  name: "dem_conv1_1_bn_sc1__scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

#########################

layer {
  bottom: "conv1_1_sc1"
  top: "conv1_1_sc1"
  name: "relu1_1_sc1"
  type: "ReLU"
}

layer {
  bottom: "dem_conv1_1_sc1"
  top: "dem_conv1_1_sc1"
  name: "dem_relu1_1_sc1"
  type: "ReLU"
}

#######################

layer {
  bottom: "conv1_1_sc1"
  top: "conv1_2_sc1"
  name: "conv1_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv1_2_sc1"
  top: "conv1_2_sc1"
  name: "conv1_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv1_2_sc1"
  top: "conv1_2_sc1"
  name: "conv1_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv1_1_sc1"
  top: "dem_conv1_2_sc1"
  name: "dem_conv1_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "dem_conv1_2_sc1"
  top: "dem_conv1_2_sc1"
  name: "dem_conv1_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "dem_conv1_2_sc1"
  top: "dem_conv1_2_sc1"
  name: "dem_conv1_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


####################

layer {
  bottom: "conv1_2_sc1"
  top: "conv1_2_sc1"
  name: "relu1_2_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv1_2_sc1"
  top: "dem_conv1_2_sc1"
  name: "dem_relu1_2_sc1"
  type: "ReLU"
}


####################

layer {
  name: "pool1_drop_sc1"
  type: "Dropout"
  bottom: "conv1_2_sc1"
  top: "conv1_2_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "conv1_2_sc1"
  top: "pool1_sc1"
  top: "pool1_mask_sc1"
  name: "pool1_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "dem_pool1_drop_sc1"
  type: "Dropout"
  bottom: "dem_conv1_2_sc1"
  top: "dem_conv1_2_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "dem_conv1_2_sc1"
  top: "dem_pool1_sc1"
  top: "dem_pool1_mask_sc1"
  name: "dem_pool1_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

######################

layer {
  bottom: "pool1_sc1"
  top: "conv2_1_sc1"
  name: "conv2_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1_sc1"
  top: "conv2_1_sc1"
  name: "conv2_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv2_1_sc1"
  top: "conv2_1_sc1"
  name: "conv2_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

layer {
  bottom: "dem_pool1_sc1"
  top: "dem_conv2_1_sc1"
  name: "dem_conv2_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv2_1_sc1"
  top: "dem_conv2_1_sc1"
  name: "dem_conv2_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv2_1_sc1"
  top: "dem_conv2_1_sc1"
  name: "dem_conv2_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

###############################

layer {
  bottom: "conv2_1_sc1"
  top: "conv2_1_sc1"
  name: "relu2_1_sc1"
  type: "ReLU"
}

layer {
  bottom: "dem_conv2_1_sc1"
  top: "dem_conv2_1_sc1"
  name: "dem_relu2_1_sc1"
  type: "ReLU"
}


#############################

layer {
  bottom: "conv2_1_sc1"
  top: "conv2_2_sc1"
  name: "conv2_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2_sc1"
  top: "conv2_2_sc1"
  name: "conv2_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "conv2_2_sc1"
  top: "conv2_2_sc1"
  name: "conv2_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv2_1_sc1"
  top: "dem_conv2_2_sc1"
  name: "dem_conv2_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv2_2_sc1"
  top: "dem_conv2_2_sc1"
  name: "dem_conv2_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "dem_conv2_2_sc1"
  top: "dem_conv2_2_sc1"
  name: "dem_conv2_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


#########################

layer {
  bottom: "conv2_2_sc1"
  top: "conv2_2_sc1"
  name: "relu2_2"
  type: "ReLU"
}


layer {
  bottom: "dem_conv2_2_sc1"
  top: "dem_conv2_2_sc1"
  name: "dem_relu2_2"
  type: "ReLU"
}


##########################

layer {
  name: "pool2_drop_sc1"
  type: "Dropout"
  bottom: "conv2_2_sc1"
  top: "conv2_2_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "conv2_2_sc1"
  top: "pool2_sc1"
  top: "pool2_mask_sc1"
  name: "pool2_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


layer {
  name: "dem_pool2_drop_sc1"
  type: "Dropout"
  bottom: "dem_conv2_2_sc1"
  top: "dem_conv2_2_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "dem_conv2_2_sc1"
  top: "dem_pool2_sc1"
  top: "dem_pool2_mask_sc1"
  name: "dem_pool2_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


########################

layer {
  bottom: "pool2_sc1"
  top: "conv3_1_sc1"
  name: "conv3_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1_sc1"
  top: "conv3_1_sc1"
  name: "conv3_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "conv3_1_sc1"
  top: "conv3_1_sc1"
  name: "conv3_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_pool2_sc1"
  top: "dem_conv3_1_sc1"
  name: "dem_conv3_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv3_1_sc1"
  top: "dem_conv3_1_sc1"
  name: "dem_conv3_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "dem_conv3_1_sc1"
  top: "dem_conv3_1_sc1"
  name: "dem_conv3_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


############################

layer {
  bottom: "conv3_1_sc1"
  top: "conv3_1_sc1"
  name: "relu3_1_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv3_1_sc1"
  top: "dem_conv3_1_sc1"
  name: "dem_relu3_1_sc1"
  type: "ReLU"
}

###########################

layer {
  bottom: "conv3_1_sc1"
  top: "conv3_2_sc1"
  name: "conv3_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2_sc1"
  top: "conv3_2_sc1"
  name: "conv3_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv3_2_sc1"
  top: "conv3_2_sc1"
  name: "conv3_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv3_1_sc1"
  top: "dem_conv3_2_sc1"
  name: "dem_conv3_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv3_2_sc1"
  top: "dem_conv3_2_sc1"
  name: "dem_conv3_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "dem_conv3_2_sc1"
  top: "dem_conv3_2_sc1"
  name: "dem_conv3_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


#################################

layer {
  bottom: "conv3_2_sc1"
  top: "conv3_2_sc1"
  name: "relu3_2_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv3_2_sc1"
  top: "dem_conv3_2_sc1"
  name: "dem_relu3_2_sc1"
  type: "ReLU"
}

################################

layer {
  bottom: "conv3_2_sc1"
  top: "conv3_3_sc1"
  name: "conv3_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3_sc1"
  top: "conv3_3_sc1"
  name: "conv3_3_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "conv3_3_sc1"
  top: "conv3_3_sc1"
  name: "conv3_3_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

layer {
  bottom: "dem_conv3_2_sc1"
  top: "dem_conv3_3_sc1"
  name: "dem_conv3_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv3_3_sc1"
  top: "dem_conv3_3_sc1"
  name: "dem_conv3_3_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "dem_conv3_3_sc1"
  top: "dem_conv3_3_sc1"
  name: "dem_conv3_3_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


###########################

layer {
  bottom: "conv3_3_sc1"
  top: "conv3_3_sc1"
  name: "relu3_3_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv3_3_sc1"
  top: "dem_conv3_3_sc1"
  name: "dem_relu3_3_sc1"
  type: "ReLU"
}


#########################

layer {
  name: "pool3_drop_sc1"
  type: "Dropout"
  bottom: "conv3_3_sc1"
  top: "conv3_3_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "conv3_3_sc1"
  top: "pool3_sc1"
  top: "pool3_mask_sc1"
  name: "pool3_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

############################

layer {
  name: "dem_pool3_drop_sc1"
  type: "Dropout"
  bottom: "dem_conv3_3_sc1"
  top: "dem_conv3_3_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "dem_conv3_3_sc1"
  top: "dem_pool3_sc1"
  top: "dem_pool3_mask_sc1"
  name: "dem_pool3_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

#########################

layer {
  bottom: "pool3_sc1"
  top: "conv4_1_sc1"
  name: "conv4_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1_sc1"
  top: "conv4_1_sc1"
  name: "conv4_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "conv4_1_sc1"
  top: "conv4_1_sc1"
  name: "conv4_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

layer {
  bottom: "dem_pool3_sc1"
  top: "dem_conv4_1_sc1"
  name: "dem_conv4_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv4_1_sc1"
  top: "dem_conv4_1_sc1"
  name: "dem_conv4_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "dem_conv4_1_sc1"
  top: "dem_conv4_1_sc1"
  name: "dem_conv4_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


#######################

layer {
  bottom: "conv4_1_sc1"
  top: "conv4_1_sc1"
  name: "relu4_1_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv4_1_sc1"
  top: "dem_conv4_1_sc1"
  name: "dem_relu4_1_sc1"
  type: "ReLU"
}


####################

layer {
  bottom: "conv4_1_sc1"
  top: "conv4_2_sc1"
  name: "conv4_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2_sc1"
  top: "conv4_2_sc1"
  name: "conv4_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0  } 
  param { lr_mult: 0  } 
  param { lr_mult: 0  }
}

layer { 
  bottom: "conv4_2_sc1"
  top: "conv4_2_sc1"
  name: "conv4_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv4_1_sc1"
  top: "dem_conv4_2_sc1"
  name: "dem_conv4_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv4_2_sc1"
  top: "dem_conv4_2_sc1"
  name: "dem_conv4_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv4_2_sc1"
  top: "dem_conv4_2_sc1"
  name: "dem_conv4_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

########################

layer {
  bottom: "conv4_2_sc1"
  top: "conv4_2_sc1"
  name: "relu4_2_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv4_2_sc1"
  top: "dem_conv4_2_sc1"
  name: "relu4_2_sc1"
  type: "ReLU"
}


######################

layer {
  bottom: "conv4_2_sc1"
  top: "conv4_3_sc1"
  name: "conv4_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3_sc1"
  top: "conv4_3_sc1"
  name: "conv4_3_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv4_3_sc1"
  top: "conv4_3_sc1"
  name: "conv4_3_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv4_2_sc1"
  top: "dem_conv4_3_sc1"
  name: "dem_conv4_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv4_3_sc1"
  top: "dem_conv4_3_sc1"
  name: "dem_conv4_3_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv4_3_sc1"
  top: "dem_conv4_3_sc1"
  name: "dem_conv4_3_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


#######################

layer {
  bottom: "conv4_3_sc1"
  top: "conv4_3_sc1"
  name: "relu4_3_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv4_3_sc1"
  top: "dem_conv4_3_sc1"
  name: "dem_relu4_3_sc1"
  type: "ReLU"
}


######################

layer {
  name: "pool4_drop_sc1"
  type: "Dropout"
  bottom: "conv4_3_sc1"
  top: "conv4_3_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "conv4_3_sc1"
  top: "pool4_sc1"
  top: "pool4_mask_sc1"
  name: "pool4_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


######################

layer {
  name: "dem_pool4_drop_sc1"
  type: "Dropout"
  bottom: "dem_conv4_3_sc1"
  top: "dem_conv4_3_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "dem_conv4_3_sc1"
  top: "dem_pool4_sc1"
  top: "dem_pool4_mask_sc1"
  name: "dem_pool4_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


######################

layer {
  bottom: "pool4_sc1"
  top: "conv5_1_sc1"
  name: "conv5_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1_sc1"
  top: "conv5_1_sc1"
  name: "conv5_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv5_1_sc1"
  top: "conv5_1_sc1"
  name: "conv5_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

layer {
  bottom: "dem_pool4_sc1"
  top: "dem_conv5_1_sc1"
  name: "dem_conv5_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv5_1_sc1"
  top: "dem_conv5_1_sc1"
  name: "dem_conv5_1_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv5_1_sc1"
  top: "dem_conv5_1_sc1"
  name: "dem_conv5_1_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


########################

layer {
  bottom: "conv5_1_sc1"
  top: "conv5_1_sc1"
  name: "relu5_1_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv5_1_sc1"
  top: "dem_conv5_1_sc1"
  name: "dem_relu5_1_sc1"
  type: "ReLU"
}


#######################

layer {
  bottom: "conv5_1_sc1"
  top: "conv5_2_sc1"
  name: "conv5_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2_sc1"
  top: "conv5_2_sc1"
  name: "conv5_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv5_2_sc1"
  top: "conv5_2_sc1"
  name: "conv5_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv5_1_sc1"
  top: "dem_conv5_2_sc1"
  name: "dem_conv5_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv5_2_sc1"
  top: "dem_conv5_2_sc1"
  name: "dem_conv5_2_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv5_2_sc1"
  top: "dem_conv5_2_sc1"
  name: "dem_conv5_2_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


##############################

layer {
  bottom: "conv5_2_sc1"
  top: "conv5_2_sc1"
  name: "relu5_2_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv5_2_sc1"
  top: "dem_conv5_2_sc1"
  name: "dem_relu5_2_sc1"
  type: "ReLU"
}


#############################

layer {
  bottom: "conv5_2_sc1"
  top: "conv5_3_sc1"
  name: "conv5_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3_sc1"
  top: "conv5_3_sc1"
  name: "conv5_3_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv5_3_sc1"
  top: "conv5_3_sc1"
  name: "conv5_3_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}



layer {
  bottom: "dem_conv5_2_sc1"
  top: "dem_conv5_3_sc1"
  name: "dem_conv5_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv5_3_sc1"
  top: "dem_conv5_3_sc1"
  name: "dem_conv5_3_bn_sc1_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv5_3_sc1"
  top: "dem_conv5_3_sc1"
  name: "dem_conv5_3_bn_sc1_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


##############################

layer {
  bottom: "conv5_3_sc1"
  top: "conv5_3_sc1"
  name: "relu5_3_sc1"
  type: "ReLU"
}


layer {
  bottom: "dem_conv5_3_sc1"
  top: "dem_conv5_3_sc1"
  name: "dem_relu5_3_sc1"
  type: "ReLU"
}
##############################

layer {
  name: "pool5_drop_sc1"
  type: "Dropout"
  bottom: "conv5_3_sc1"
  top: "conv5_3_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


layer {
  bottom: "conv5_3_sc1"
  top: "pool5_sc1"
  top: "pool5_mask_sc1"
  name: "pool5_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


layer {
  name: "dem_pool5_drop_sc1"
  type: "Dropout"
  bottom: "dem_conv5_3_sc1"
  top: "dem_conv5_3_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layer {
  bottom: "dem_conv5_3_sc1"
  top: "dem_pool5_sc1"
  top: "dem_pool5_mask_sc1"
  name: "dem_pool5_sc1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


##############################

layer {
  name: "upsample5_drop_sc1"
  type: "Dropout"
  bottom: "pool5_sc1"
  top: "pool5_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


layer {
  name: "dem_upsample5_drop_sc1"
  type: "Dropout"
  bottom: "dem_pool5_sc1"
  top: "dem_pool5_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


# -------------------------------- DECODER ---------------------------------- #

# layer {
#      name: 'upsample5_sc1____'
#      type: "Deconvolution"
#      bottom: "pool5_sc1"
#      top: "pool5_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 512
# 	   group: 512
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false
#      }
#}

# layer {
#      name: 'dem_upsample5_sc1____'
#      type: "Deconvolution"
#      bottom: "dem_pool5_sc1"
#      top: "dem_pool5_D_sc1"
#      param {
#      	   lr_mult: 0 
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 512
# 	   group: 512
# 	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false 
#      }
# }

layer {
  name: "upsample5_sc1"
  type: "Upsample"
  bottom: "pool5_sc1"
  top: "pool5_D_sc1"
  bottom: "pool5_mask_sc1"
  upsample_param {
    scale: 2
  }
}

layer {
  name: "dem_upsample5_sc1"
  type: "Upsample"
  bottom: "dem_pool5_sc1"
  top: "dem_pool5_D_sc1"
  bottom: "dem_pool5_mask_sc1"
  upsample_param {
    scale: 2
  }
}


###########################

layer {
  bottom: "pool5_D_sc1"
  top: "conv5_3_D_sc1"
  name: "conv5_3_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1 # 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3_D_sc1"
  top: "conv5_3_D_sc1"
  name: "conv5_3_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv5_3_D_sc1"
  top: "conv5_3_D_sc1"
  name: "conv5_3_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_pool5_D_sc1"
  top: "dem_conv5_3_D_sc1"
  name: "dem_conv5_3_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1 # 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv5_3_D_sc1"
  top: "dem_conv5_3_D_sc1"
  name: "dem_conv5_3_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv5_3_D_sc1"
  top: "dem_conv5_3_D_sc1"
  name: "dem_conv5_3_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


###########################

layer {
  bottom: "conv5_3_D_sc1"
  top: "conv5_3_D_sc1"
  name: "relu5_3_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv5_3_D_sc1"
  top: "dem_conv5_3_D_sc1"
  name: "dem_relu5_3_D_sc1__"
  type: "ReLU"
}


#######################

layer {
  bottom: "conv5_3_D_sc1"
  top: "conv5_2_D_sc1"
  name: "conv5_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1 # 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2_D_sc1"
  top: "conv5_2_D_sc1"
  name: "conv5_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv5_2_D_sc1"
  top: "conv5_2_D_sc1"
  name: "conv5_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv5_3_D_sc1"
  top: "dem_conv5_2_D_sc1"
  name: "dem_conv5_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1 # 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv5_2_D_sc1"
  top: "dem_conv5_2_D_sc1"
  name: "dem_conv5_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv5_2_D_sc1"
  top: "dem_conv5_2_D_sc1"
  name: "dem_conv5_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

###########################

layer {
  bottom: "conv5_2_D_sc1"
  top: "conv5_2_D_sc1"
  name: "relu5_2_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv5_2_D_sc1"
  top: "dem_conv5_2_D_sc1"
  name: "dem_relu5_2_D_sc1__"
  type: "ReLU"
}


#########################


layer {
  bottom: "conv5_2_D_sc1"
  top: "conv5_1_D_sc1"
  name: "conv5_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1 # 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1_D_sc1"
  top: "conv5_1_D_sc1"
  name: "conv5_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv5_1_D_sc1"
  top: "conv5_1_D_sc1"
  name: "conv5_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv5_2_D_sc1"
  top: "dem_conv5_1_D_sc1"
  name: "dem_conv5_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv5_1_D_sc1"
  top: "dem_conv5_1_D_sc1"
  name: "dem_conv5_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv5_1_D_sc1"
  top: "dem_conv5_1_D_sc1"
  name: "dem_conv5_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


#############################

layer {
  bottom: "conv5_1_D_sc1"
  top: "conv5_1_D_sc1"
  name: "relu5_1_D_sc1__"
  type: "ReLU"
}

layer {
  bottom: "dem_conv5_1_D_sc1"
  top: "dem_conv5_1_D_sc1"
  name: "dem_relu5_1_D_sc1__"
  type: "ReLU"
}

############################

layer {
  name: "upsample4_drop_sc1__"
  type: "Dropout"
  bottom: "conv5_1_D_sc1"
  top: "conv5_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}

layer {
  name: "dem_upsample4_drop_sc1__"
  type: "Dropout"
  bottom: "dem_conv5_1_D_sc1"
  top: "dem_conv5_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


#########################

# layer {
#      name: 'upsample4_sc1___'
#      type: "Deconvolution"
#      bottom: "conv5_1_D_sc1"
#      top: "pool4_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 512
# 	   group: 512
#      	   weight_filler: {type: "xavier" } 
# 	   bias_term: false 
#      }
# }

# layer {
#      name: 'dem_upsample4_sc1___'
#      type: "Deconvolution"
#      bottom: "dem_conv5_1_D_sc1"
#      top: "dem_pool4_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 512
# 	   group: 512
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false
#      }
# }

layer {
  name: "upsample4_sc1"
  type: "Upsample"
  bottom: "conv5_1_D_sc1"
  top: "pool4_D_sc1"
  bottom: "pool4_mask_sc1"
  upsample_param {
    #upsample_h: 36
    #upsample_w: 36
    scale: 2
  }
}


layer {
  name: "dem_upsample4_sc1"
  type: "Upsample"
  bottom: "dem_conv5_1_D_sc1"
  top: "dem_pool4_D_sc1"
  bottom: "dem_pool4_mask_sc1"
  upsample_param {
    #upsample_h: 36
    #upsample_w: 36
    scale: 2
  }
}


#########################


layer {
  bottom: "pool4_D_sc1"
  top: "conv4_3_D_sc1"
  name: "conv4_3_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3_D_sc1"
  top: "conv4_3_D_sc1"
  name: "conv4_3_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv4_3_D_sc1"
  top: "conv4_3_D_sc1"
  name: "conv4_3_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_pool4_D_sc1"
  top: "dem_conv4_3_D_sc1"
  name: "dem_conv4_3_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv4_3_D_sc1"
  top: "dem_conv4_3_D_sc1"
  name: "dem_conv4_3_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv4_3_D_sc1"
  top: "dem_conv4_3_D_sc1"
  name: "dem_conv4_3_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

###########################

layer {
  bottom: "conv4_3_D_sc1"
  top: "conv4_3_D_sc1"
  name: "relu4_3_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv4_3_D_sc1"
  top: "dem_conv4_3_D_sc1"
  name: "dem_relu4_3_D_sc1__"
  type: "ReLU"
}

########################

layer {
  bottom: "conv4_3_D_sc1"
  top: "conv4_2_D_sc1"
  name: "conv4_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2_D_sc1"
  top: "conv4_2_D_sc1"
  name: "conv4_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv4_2_D_sc1"
  top: "conv4_2_D_sc1"
  name: "conv4_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv4_3_D_sc1"
  top: "dem_conv4_2_D_sc1"
  name: "dem_conv4_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv4_2_D_sc1"
  top: "dem_conv4_2_D_sc1"
  name: "dem_conv4_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv4_2_D_sc1"
  top: "dem_conv4_2_D_sc1"
  name: "dem_conv4_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

########################

layer {
  bottom: "conv4_2_D_sc1"
  top: "conv4_2_D_sc1"
  name: "relu4_2_D_sc1__"
  type: "ReLU"
}

layer {
  bottom: "dem_conv4_2_D_sc1"
  top: "dem_conv4_2_D_sc1"
  name: "dem_relu4_2_D_sc1__"
  type: "ReLU"
}

####################

layer {
  bottom: "conv4_2_D_sc1"
  top: "conv4_1_D_sc1"
  name: "conv4_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1_D_sc1"
  top: "conv4_1_D_sc1"
  name: "conv4_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv4_1_D_sc1"
  top: "conv4_1_D_sc1"
  name: "conv4_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv4_2_D_sc1"
  top: "dem_conv4_1_D_sc1"
  name: "dem_conv4_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv4_1_D_sc1"
  top: "dem_conv4_1_D_sc1"
  name: "dem_conv4_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv4_1_D_sc1"
  top: "dem_conv4_1_D_sc1"
  name: "dem_conv4_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

###########################

layer {
  bottom: "conv4_1_D_sc1"
  top: "conv4_1_D_sc1"
  name: "relu4_1_D_sc1__"
  type: "ReLU"
}

layer {
  bottom: "dem_conv4_1_D_sc1"
  top: "dem_conv4_1_D_sc1"
  name: "dem_relu4_1_D_sc1__"
  type: "ReLU"
}

#########################

layer {
  name: "upsample3_drop_sc1__"
  type: "Dropout"
  bottom: "conv4_1_D_sc1"
  top: "conv4_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


layer {
  name: "dem_upsample3_drop_sc1__"
  type: "Dropout"
  bottom: "dem_conv4_1_D_sc1"
  top: "dem_conv4_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


##############################

# layer {
#      name: 'upsample3_sc1___'
#      type: "Deconvolution"
#      bottom: "conv4_1_D_sc1"
#      top: "pool3_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 256
# 	   group: 256
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false 
#      }
# }

# layer {
#      name: 'dem_upsample3_sc1___'
#      type: "Deconvolution"
#      bottom: "dem_conv4_1_D_sc1"
#      top: "dem_pool3_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 256
# 	   group: 256
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false 
#      }
# }

layer {
  name: "upsample3_sc1"
  type: "Upsample"
  bottom: "conv4_1_D_sc1"
  top: "pool3_D_sc1"
  bottom: "pool3_mask_sc1"
  upsample_param {
    scale: 2
  }
}


layer {
  name: "dem_upsample3_sc1"
  type: "Upsample"
  bottom: "dem_conv4_1_D_sc1"
  top: "dem_pool3_D_sc1"
  bottom: "dem_pool3_mask_sc1"
  upsample_param {
    scale: 2
  }
}


##############################

layer {
  bottom: "pool3_D_sc1"
  top: "conv3_3_D_sc1"
  name: "conv3_3_D_sc1_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3_D_sc1"
  top: "conv3_3_D_sc1"
  name: "conv3_3_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv3_3_D_sc1"
  top: "conv3_3_D_sc1"
  name: "conv3_3_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_pool3_D_sc1"
  top: "dem_conv3_3_D_sc1"
  name: "dem_conv3_3_D_sc1_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv3_3_D_sc1"
  top: "dem_conv3_3_D_sc1"
  name: "dem_conv3_3_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv3_3_D_sc1"
  top: "dem_conv3_3_D_sc1"
  name: "dem_conv3_3_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

############################

layer {
  bottom: "conv3_3_D_sc1"
  top: "conv3_3_D_sc1"
  name: "relu3_3_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv3_3_D_sc1"
  top: "dem_conv3_3_D_sc1"
  name: "dem_relu3_3_D_sc1__"
  type: "ReLU"
}


##########################

layer {
  bottom: "conv3_3_D_sc1"
  top: "conv3_2_D_sc1"
  name: "conv3_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2_D_sc1"
  top: "conv3_2_D_sc1"
  name: "conv3_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv3_2_D_sc1"
  top: "conv3_2_D_sc1"
  name: "conv3_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv3_3_D_sc1"
  top: "dem_conv3_2_D_sc1"
  name: "dem_conv3_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv3_2_D_sc1"
  top: "dem_conv3_2_D_sc1"
  name: "dem_conv3_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv3_2_D_sc1"
  top: "dem_conv3_2_D_sc1"
  name: "dem_conv3_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

##########################

layer {
  bottom: "conv3_2_D_sc1"
  top: "conv3_2_D_sc1"
  name: "relu3_2_D_sc1__"
  type: "ReLU"
}

layer {
  bottom: "dem_conv3_2_D_sc1"
  top: "dem_conv3_2_D_sc1"
  name: "dem_relu3_2_D_sc1__"
  type: "ReLU"
}

########################

layer {
  bottom: "conv3_2_D_sc1"
  top: "conv3_1_D_sc1"
  name: "conv3_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1_D_sc1"
  top: "conv3_1_D_sc1"
  name: "conv3_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv3_1_D_sc1"
  top: "conv3_1_D_sc1"
  name: "conv3_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv3_2_D_sc1"
  top: "dem_conv3_1_D_sc1"
  name: "dem_conv3_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv3_1_D_sc1"
  top: "dem_conv3_1_D_sc1"
  name: "dem_conv3_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv3_1_D_sc1"
  top: "dem_conv3_1_D_sc1"
  name: "dem_conv3_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


#######################

layer {
  bottom: "conv3_1_D_sc1"
  top: "conv3_1_D_sc1"
  name: "relu3_1_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv3_1_D_sc1"
  top: "dem_conv3_1_D_sc1"
  name: "dem_relu3_1_D_sc1__"
  type: "ReLU"
}


#########################

layer {
  name: "upsample2_drop_sc1__"
  type: "Dropout"
  bottom: "conv3_1_D_sc1"
  top: "conv3_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


layer {
  name: "dem_upsample2_drop_sc1__"
  type: "Dropout"
  bottom: "dem_conv3_1_D_sc1"
  top: "dem_conv3_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.0
  }
}


##########################

# layer {
#      name: 'upsample2_sc1___'
#      type: "Deconvolution"
#      bottom: "conv3_1_D_sc1"
#      top: "pool2_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 128
# 	   group: 128
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false
#      }
# }

# layer {
#      name: 'dem_upsample2_sc1_ __'
#      type: "Deconvolution"
#      bottom: "dem_conv3_1_D_sc1"
#      top: "dem_pool2_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 128
# 	   group: 128
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false
#      }
# }

layer {
  name: "upsample2_sc1"
  type: "Upsample"
  bottom: "conv3_1_D_sc1"
  top: "pool2_D_sc1"
  bottom: "pool2_mask_sc1"
  upsample_param {
    scale: 2
  }
}

layer {
  name: "dem_upsample2_sc1"
  type: "Upsample"
  bottom: "dem_conv3_1_D_sc1"
  top: "dem_pool2_D_sc1"
  bottom: "dem_pool2_mask_sc1"
  upsample_param {
    scale: 2
  }
}


#######################

layer {
  bottom: "pool2_D_sc1"
  top: "conv2_2_D_sc1"
  name: "conv2_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2_D_sc1"
  top: "conv2_2_D_sc1"
  name: "conv2_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv2_2_D_sc1"
  top: "conv2_2_D_sc1"
  name: "conv2_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_pool2_D_sc1"
  top: "dem_conv2_2_D_sc1"
  name: "dem_conv2_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv2_2_D_sc1"
  top: "dem_conv2_2_D_sc1"
  name: "dem_conv2_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv2_2_D_sc1"
  top: "dem_conv2_2_D_sc1"
  name: "dem_conv2_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

###############################

layer {
  bottom: "conv2_2_D_sc1"
  top: "conv2_2_D_sc1"
  name: "relu2_2_D_sc1__"
  type: "ReLU"
}

layer {
  bottom: "dem_conv2_2_D_sc1"
  top: "dem_conv2_2_D_sc1"
  name: "dem_relu2_2_D_sc1__"
  type: "ReLU"
}


############################

layer {
  bottom: "conv2_2_D_sc1"
  top: "conv2_1_D_sc1"
  name: "conv2_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1_D_sc1"
  top: "conv2_1_D_sc1"
  name: "conv2_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv2_1_D_sc1"
  top: "conv2_1_D_sc1"
  name: "conv2_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


layer {
  bottom: "dem_conv2_2_D_sc1"
  top: "dem_conv2_1_D_sc1"
  name: "dem_conv2_1_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "dem_conv2_1_D_sc1"
  top: "dem_conv2_1_D_sc1"
  name: "dem_conv2_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv2_1_D_sc1"
  top: "dem_conv2_1_D_sc1"
  name: "dem_conv2_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


######################

layer {
  bottom: "conv2_1_D_sc1"
  top: "conv2_1_D_sc1"
  name: "relu2_1_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv2_1_D_sc1"
  top: "dem_conv2_1_D_sc1"
  name: "dem_relu2_1_D_sc1__"
  type: "ReLU"
}


#######################

layer {
  name: "upsample1_drop_sc1__"
  type: "Dropout"
  bottom: "conv2_1_D_sc1"
  top: "conv2_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.01
  }
}


layer {
  name: "dem_upsample1_drop_sc1__"
  type: "Dropout"
  bottom: "dem_conv2_1_D_sc1"
  top: "dem_conv2_1_D_sc1"
  dropout_param {
    dropout_ratio: 0.01
  }
}


########################

# layer {
#      name: 'upsample1_sc1___'
#      type: "Deconvolution"
#      bottom: "conv2_1_D_sc1"
#      top: "pool1_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 64
# 	   group: 64
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false
#      }
# }

# layer {
#      name: 'dem_upsample1_sc1___'
#      type: "Deconvolution"
#      bottom: "dem_conv2_1_D_sc1"
#      top: "dem_pool1_D_sc1"
#      param {
#      	   lr_mult: 0
#      	   decay_mult: 1
#      }
#      convolution_param {
#            kernel_size: 4
#      	   stride: 2
# 	   pad: 1
#      	   num_output: 64
# 	   group: 64
#      	   weight_filler: {type: "bilinear" } 
# 	   bias_term: false
#      }
# }

layer {
  name: "upsample1_sc1"
  type: "Upsample"
  bottom: "conv2_1_D_sc1"
  top: "pool1_D_sc1"
  bottom: "pool1_mask_sc1"
  upsample_param {
    scale: 2
  }
}


layer {
  name: "dem_upsample1_sc1"
  type: "Upsample"
  bottom: "dem_conv2_1_D_sc1"
  top: "dem_pool1_D_sc1"
  bottom: "dem_pool1_mask_sc1"
  upsample_param {
    scale: 2
  }
}


########################

layer {
  bottom: "pool1_D_sc1"
  top: "conv1_2_D_sc1"
  name: "conv1_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv1_2_D_sc1"
  top: "conv1_2_D_sc1"
  name: "conv1_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv1_2_D_sc1"
  top: "conv1_2_D_sc1"
  name: "conv1_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

layer {
  bottom: "dem_pool1_D_sc1"
  top: "dem_conv1_2_D_sc1"
  name: "dem_conv1_2_D_sc1__"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "dem_conv1_2_D_sc1"
  top: "dem_conv1_2_D_sc1"
  name: "dem_conv1_2_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv1_2_D_sc1"
  top: "dem_conv1_2_D_sc1"
  name: "dem_conv1_2_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}


########################

layer {
  bottom: "conv1_2_D_sc1"
  top: "conv1_2_D_sc1"
  name: "relu1_2_D_sc1__"
  type: "ReLU"
}


layer {
  bottom: "dem_conv1_2_D_sc1"
  top: "dem_conv1_2_D_sc1"
  name: "dem_relu1_2_D_sc1__"
  type: "ReLU"
}


#######################

layer {
  bottom: "conv1_2_D_sc1"
  top: "conv1_1_D_sc1"
  name: "conv1_1_D_sc1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 10
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv1_1_D_sc1"
  top: "conv1_1_D_sc1"
  name: "conv1_1_D_bn_sc1___"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  # calculate the mean and variance for each mini-batch
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "conv1_1_D_sc1"
  top: "conv1_1_D_sc1"
  name: "conv1_1_D_bn_sc1_scale___"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}
     
layer {
  bottom: "dem_conv1_2_D_sc1"
  top: "dem_conv1_1_D_sc1"
  name: "dem_conv1_1_D_sc1___"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 10
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "dem_conv1_1_D_sc1"
  top: "dem_conv1_1_D_sc1"
  name: "dem_conv1_1_D_bn_sc1____"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "dem_conv1_1_D_sc1"
  top: "dem_conv1_1_D_sc1"
  name: "dem_conv1_1_D_bn_sc1_scale__"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      # scale separately for each channel
    	    num_axes: 1  # ... but not spatially (default)
    	    filler { type: 'constant' value: 1 }           # initialize scaling to 1
    	    bias_filler { type: 'constant' value: 0.001 }  # initialize bias
    }
}

# -------------------------- #

layer {
  bottom: "conv1_1_D_sc1"
  top: "conv1_1_D_sc1"
  name: "img-relu-score_sc1__"
  type: "ReLU"
}

layer {
  bottom: "dem_conv1_1_D_sc1"
  top: "dem_conv1_1_D_sc1"
  name: "dem-relu-score_sc1_"
  type: "ReLU"
}

###############################


layer {
  name: "concat-data-sc1_"
  bottom: "conv1_1_D_sc1"
  bottom: "dem_conv1_1_D_sc1"
  top: "data_sc1"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  bottom: "data_sc1"
  top: "data_sc1"
  name: "dem_and_image_deconder_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "data_sc1"
  top: "data_sc1"
  name: "dem_and_image_decoder_scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }      
    	    bias_filler { type: 'constant' value: 0 }  
    }
}



# ================== #

layer {
  name: "feature_and_edges_sc1"
  bottom: "data_sc1"
  bottom: "edge"
  top: "feature_and_edges_sc1"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  bottom: "feature_and_edges_sc1"
  top: "feature_and_edges_sc1_norm"
  name: "concat-norm"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}
layer { 
  bottom: "feature_and_edges_sc1_norm"
  top: "feature_and_edges_sc1_norm"
  name: "concat-scale"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }      
    	    bias_filler { type: 'constant' value: 0 }  
    }
}

# ================== #
layer {           
  bottom: "feature_and_edges_sc1_norm" 
  top: "score1_"                  
  name: "spatial-fusion_"          
  type: "Convolution"            
  param {                        
    lr_mult: 1                  
    decay_mult: 1                
  }                 
  param {           
    lr_mult: 2     
    decay_mult: 0     
  }
  convolution_param {
    weight_filler {  
      type: "xavier" 
    }                
    bias_filler {    
      type: "constant"
      value: 0        
    }                 
    num_output: 5     
    pad: 0            
    kernel_size: 1    
  }                   
}                                                                                          


layer {
  bottom: "score1_"
  top: "score1_"
  name: "spatial-fusion-bn_"
  type: "BatchNorm"
  batch_norm_param {
    use_global_stats: false  
  }
  param { lr_mult: 0 } 
  param { lr_mult: 0 } 
  param { lr_mult: 0 }
}

layer { 
  bottom: "score1_"
  top: "score1_"
  name: "spatial-fusion-scale_"
    type: 'Scale',
    scale_param { 
     	    bias_term: true
    	    axis: 1      
    	    num_axes: 1  
    	    filler { type: 'constant' value: 1 }           
    	    bias_filler { type: 'constant' value: 0.001 } 
    }
}
                                                                                                   
layer {           
  bottom: "score1_"
  top: "score1"                  
  name: "final-score1_"   
  type: "Convolution"            
  param {                        
    lr_mult: 1                  
    decay_mult: 1                
  }                 
  param {           
    lr_mult: 2     
    decay_mult: 0     
  }
  convolution_param {
    weight_filler {  
      type: "xavier" 
    }                
    bias_filler {    
      type: "constant"
      value: 0        
    }                 
    num_output: 5     
    pad: 1            
    kernel_size: 3
  }                   
}                                                                                                                             

# ------------- LOSS-1  -------------- #

layer {
  name: "loss1" 
  type: "SoftmaxWithLoss"
  bottom: "score1"
  bottom: "label"
  top: "loss1"
  loss_param {
    normalize: false
  }
}
